package {{.ModelSnake}}_usecase_v1

import (
	"context"
	"{{.Meta.import_model}}"
	"{{.Meta.import_repository}}"
	"{{.Meta.import_request}}"
	"{{.Meta.import_response}}"
)

type {{.ModelCamel}}FetchUsecase struct {
	{{.ModelCamel}}Paginate {{.ModelSnake}}_repository.{{.Model}}Paginate
	{{.ModelCamel}}Fetch    {{.ModelSnake}}_repository.{{.Model}}Fetch
}

func New{{.Model}}FetchUsecase({{.ModelCamel}}Paginate {{.ModelSnake}}_repository.{{.Model}}Paginate, {{.ModelCamel}}Fetch {{.ModelSnake}}_repository.{{.Model}}Fetch) *{{.ModelCamel}}FetchUsecase {
	return &{{.ModelCamel}}FetchUsecase{
	{{- .ModelCamel}}Paginate: {{.ModelCamel}}Paginate, {{.ModelCamel}}Fetch: {{.ModelCamel}}Fetch}
}
func (f {{.ModelCamel}}FetchUsecase) Paginate(ctx context.Context, param {{.ModelSnake}}_request.{{.Model}}Param) ({{.ModelSnake}}_response.{{.Model}}Paginate, error) {
	return f.{{.ModelCamel}}Paginate.Paginate(ctx, param)
}

func (f {{.ModelCamel}}FetchUsecase) Fetch(ctx context.Context, param {{.ModelSnake}}_request.{{.Model}}Param) ([]model.{{.Model}}, error) {
	return f.{{.ModelCamel}}Fetch.Fetch(ctx, param)
}
