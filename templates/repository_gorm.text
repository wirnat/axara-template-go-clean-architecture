package {{.ModelSnake}}_gorm

import (
	"context"
	"{{.Meta.import_model}}"
    "{{.Meta.import_request}}"
    "{{.Meta.import_response}}"
	"{{.Meta.import_pagination}}"
	"{{.Meta.import_trx_gorm}}"
	"gorm.io/gorm"
)

type {{.ModelCamel}}Gorm struct {
	db gorm.DB
}

func New(db gorm.DB) *{{.ModelCamel}}Gorm {
    db.AutoMigrate(&model.{{.Model}}{})
	return &{{.ModelCamel}}Gorm{db: db}
}

func (c {{.ModelCamel}}Gorm) Fetch(ctx context.Context, Param {{.ModelSnake}}_request.{{.Model}}Param) (res []model.{{.Model}}, err error) {
	filter(&c.db, Param)
	err = c.db.Find(&res).Error
	return
}

func (c {{.ModelCamel}}Gorm) Get(ctx context.Context, Param {{.ModelSnake}}_request.{{.Model}}Param) (res model.{{.Model}}, err error) {
	filter(&c.db, Param)
	err = c.db.First(&res).Error
	return
}

func (c {{.ModelCamel}}Gorm) Store(ctx context.Context, {{.ModelSnake}} *model.{{.Model}}) error {
	db, err :=  gorm_transaction.GetTx(ctx)
	if err == nil {
		c.db = *db
	}

	return c.db.Create(&{{.ModelSnake}}).Error
}

func (c {{.ModelCamel}}Gorm) Update(ctx context.Context, {{.ModelSnake}} *model.{{.Model}}, condition ...{{.ModelSnake}}_request.{{.Model}}Param) error {
	db, err :=  gorm_transaction.GetTx(ctx)
	if err == nil {
		c.db = *db
	}

	for _, p := range condition {
        filter(&c.db, p)
    }

	return c.db.Updates(&{{.ModelSnake}}).Error
}

func (c {{.ModelCamel}}Gorm) Delete(ctx context.Context, uuid string) error {
	db, err :=  gorm_transaction.GetTx(ctx)
	if err == nil {
		c.db = *db
	}
	return c.db.Debug().Where("uuid=?", uuid).Delete(&model.{{.Model}}{}).Error
}

func (c {{.ModelCamel}}Gorm) Paginate(ctx context.Context, param {{.ModelSnake}}_request.{{.Model}}Param) ({{.ModelSnake}}_response.{{.Model}}Paginate, error) {
	res := {{.ModelSnake}}_response.{{.Model}}Paginate{
		Pagination: &paginator.Pagination{
			PaginateReq: param.PaginateReq,
		},
	}

	filter(&c.db, param)
	err := c.db.Debug().Scopes(paginator.PaginateV2(&res.Result, &c.db, res.Pagination)).Find(&res.Result).Error
	if err != nil {
		return {{.ModelSnake}}_response.{{.Model}}Paginate{}, err
	}

	return res, nil
}

