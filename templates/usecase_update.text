package {{.ModelSnake}}_usecase_v1

import (
	"context"
	"{{.Meta.import_model}}"
	"{{.Meta.import_repository}}"
	"{{.Meta.import_request}}"
)

type {{.ModelCamel}}UpdateUsecase struct {
	{{.ModelCamel}}Update {{.ModelSnake}}_repository.{{.Model}}Update
	{{.ModelCamel}}Get    {{.ModelSnake}}_repository.{{.Model}}Get
}

func New{{.Model}}UpdateUsecase({{.ModelCamel}}Update {{.ModelSnake}}_repository.{{.Model}}Update, {{.ModelCamel}}Get {{.ModelSnake}}_repository.{{.Model}}Get) *{{.ModelCamel}}UpdateUsecase {
	return &{{.ModelCamel}}UpdateUsecase{
	{{- .ModelCamel}}Update: {{.ModelCamel}}Update,
	{{- .ModelCamel}}Get: {{.ModelCamel}}Get}
}

func (u {{.ModelCamel}}UpdateUsecase) Update(ctx context.Context, param {{.ModelSnake}}_request.{{.Model}}Update) (r model.{{.Model}}, err error) {
	{{- range $m:=.ModelFields }}
    	{{- if and (ne $m.Type "time.Time") (ne $m.Type "gorm.DeletedAt")}}
    	{{- if $m.Meta.auto_fill}}{{else}}
    	{{- if ne $m.Name "UUID"}}
    	    {{- if $m.IsPtr}}
    	    r.{{$m.Name}} = &param.{{$m.Name}}
    	    {{- else}}
    	     r.{{$m.Name}} = param.{{$m.Name}}
    	    {{- end}}
        {{- end}}
        {{- end}}
    	{{- end}}
    	{{- end}}

    	err = u.{{.ModelCamel}}Update.Update(ctx, &r,{{.ModelSnake}}_request.{{.Model}}Param{UUID: &param.UUID})
    	if err!=nil{
    	    return
    	}

    	r, err = u.{{.ModelCamel}}Get.Get(ctx, {{.ModelSnake}}_request.{{.Model}}Param{
        	UUID: &param.UUID,
        })

    	return
}
