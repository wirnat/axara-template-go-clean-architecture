package {{.ModelSnake}}_mock

import (
	"context"
	"github.com/stretchr/testify/mock"
	"{{.Meta.import_model}}"
	"{{.Meta.import_request}}"
	"{{.Meta.import_response}}"
)

type {{.Model}}Mock struct {
	mock.Mock
}

func (o {{.Model}}Mock) Paginate(ctx context.Context, param {{.ModelSnake}}_request.{{.Model}}Param) (res response.{{.Model}}Paginate, err error) {
	args := o.Called(ctx, param)
	res, _ = args.Get(0).(response.{{.Model}}Paginate)
	err, _ = args.Get(1).(error)
	return
}

func (o {{.Model}}Mock) Fetch(ctx context.Context, Param {{.ModelSnake}}_request.{{.Model}}Param) (res []model.{{.Model}}, err error) {
	args := o.Called(ctx, Param)
	res, _ = args.Get(0).([]model.{{.Model}})
	err, _ = args.Get(1).(error)
	return
}

func (o {{.Model}}Mock) Get(ctx context.Context, Param {{.ModelSnake}}_request.{{.Model}}Param) (res model.{{.Model}}, err error) {
	args := o.Called(ctx, Param)
	res, _ = args.Get(0).(model.{{.Model}})
	err, _ = args.Get(1).(error)
	return
}

func (o {{.Model}}Mock) Store(ctx context.Context, {{.ModelCamel}} *model.{{.Model}}) (err error) {
	args := o.Called(ctx, {{.ModelCamel}})
	err, _ = args.Get(0).(error)
	return
}

func (o {{.Model}}Mock) Update(ctx context.Context, {{.ModelCamel}} *model.{{.Model}}, condition ...{{.ModelSnake}}_request.{{.Model}}Param) (err error) {
	args := o.Called(ctx, {{.ModelCamel}}, condition)
	err, _ = args.Get(0).(error)
	return
}

func (o {{.Model}}Mock) Delete(ctx context.Context, uuid string) (err error) {
	args := o.Called(ctx, ctx, uuid)
	err, _ = args.Get(0).(error)
	return
}
