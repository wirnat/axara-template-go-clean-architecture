package {{.ModelSnake}}_http_1

import (
	"{{.Meta.import_request}}"
	"{{.Meta.import_usecase}}"
	"github.com/labstack/echo/v4"
	"{{.Meta.import_infrastructure}}/utils"
)

type {{.ModelCamel}}Rest struct {
	{{.Model}}Fetch  {{.ModelSnake}}_usecase.{{.Model}}Fetch
	{{.Model}}Get    {{.ModelSnake}}_usecase.{{.Model}}Get
	{{.Model}}Delete {{.ModelSnake}}_usecase.{{.Model}}Delete
	{{.Model}}Update {{.ModelSnake}}_usecase.{{.Model}}Update
	{{.Model}}Store  {{.ModelSnake}}_usecase.{{.Model}}Store
}

func New{{.Model}}Rest({{.ModelCamel}}Fetch {{.ModelSnake}}_usecase.{{.Model}}Fetch, {{.ModelCamel}}Get {{.ModelSnake}}_usecase.{{.Model}}Get, {{.ModelCamel}}Delete {{.ModelSnake}}_usecase.{{.Model}}Delete, {{.ModelCamel}}Update {{.ModelSnake}}_usecase.{{.Model}}Update, {{.ModelCamel}}Store {{.ModelSnake}}_usecase.{{.Model}}Store) *{{.ModelCamel}}Rest {
	return &{{.ModelCamel}}Rest{ {{- .Model}}Fetch: {{.ModelCamel}}Fetch, {{.Model}}Get: {{.ModelCamel}}Get, {{.Model}}Delete: {{.ModelCamel}}Delete, {{.Model}}Update: {{.ModelCamel}}Update, {{.Model}}Store: {{.ModelCamel}}Store}
}

func (r {{.ModelCamel}}Rest) Expose(e echo.Echo) {
	{{.ModelSnake}} := e.Group("/{{.ModelSnake}}")
	{{.ModelSnake}}.GET("/:uuid", r.Show)
	{{.ModelSnake}}.GET("", r.Paginate)
	{{.ModelSnake}}.POST("", r.Store)
	{{.ModelSnake}}.PUT("/:uuid", r.Update)
	{{.ModelSnake}}.DELETE("/:uuid", r.Delete)
}

// Show godoc
//	@Summary		Show {{.Model}}
//	@Description	get detail of {{.ModelSnake}}
//	@Tags			{{.ModelSnake}}
//	@Accept			json
//	@Produce		json
//	@Param			uuid	path		string	false	"uuid {{.ModelSnake}}"
//	@Success		200	{object}		model.{{.Model}}
//	@Router			/{{.ModelSnake}}/{uuid} [get]
func (r {{.ModelCamel}}Rest) Show(ctx echo.Context) error {
	param := {{.ModelSnake}}_request.{{.Model}}Param{
	    UUID:  utils.StringP(ctx.Param("uuid")),
	}

	res, err := r.{{.Model}}Get.Get(ctx.Request().Context(), param)
	if err != nil {
		return ctx.JSON(400, err.Error())
	}

	return ctx.JSON(200, res)
}

func (r {{.ModelCamel}}Rest) Find(ctx echo.Context) error {
	param := {{.ModelSnake}}_request.{{.Model}}Param{}
	err := ctx.Bind(&param)
	if err != nil {
		return ctx.JSON(400, err.Error())
	}

	res, err := r.{{.Model}}Fetch.Fetch(ctx.Request().Context(), param)
	if err != nil {
		return ctx.JSON(404, err.Error())
	}

	return ctx.JSON(200, res)
}

// Store godoc
//	@Summary		Store {{.Model}}
//	@Description	create a {{.ModelSnake}}
//	@Tags			{{.ModelSnake}}
//	@Accept			json
//	@Produce		json
//	@Param			payload	body	{{.ModelSnake}}_request.{{.Model}}Store	true	"payload creates {{.ModelSnake}}"
//	@Success		200	{array}		model.{{.Model}}
//	@Router			/{{.ModelSnake}} [post]
func (r {{.ModelCamel}}Rest) Store(ctx echo.Context) error {
	param := new({{.ModelSnake}}_request.{{.Model}}Store)
	err := ctx.Bind(param)
	if err != nil {
		return ctx.JSON(400, err.Error())
	}

	err = ctx.Validate(param)
	if err != nil {
		return err
	}

	res, err := r.{{.Model}}Store.Store(ctx.Request().Context(), *param)
	if err != nil {
		return ctx.JSON(500, err.Error())
	}
	return ctx.JSON(200, res)
}


// Update godoc
//	@Summary		Update {{.Model}}
//	@Description	update a {{.ModelSnake}}
//	@Tags			{{.ModelSnake}}
//	@Accept			json
//	@Produce		json
//	@Param			uuid	path		string	false	"uuid {{.ModelSnake}}"
//	@Param			payload	body {{.ModelSnake}}_request.{{.Model}}Update	true	"payload updates {{.ModelSnake}}"
//	@Success		200	{array}		model.{{.Model}}
//	@Router			/{{.ModelSnake}}/{uuid} [put]
func (r {{.ModelCamel}}Rest) Update(ctx echo.Context) error {
	param := new({{.ModelSnake}}_request.{{.Model}}Update)
	err := ctx.Bind(param)
	if err != nil {
		return ctx.JSON(400, err.Error())
	}
	param.UUID = ctx.Param("uuid")

	err = ctx.Validate(param)
	if err != nil {
		return err
	}

	res, err := r.{{.Model}}Update.Update(ctx.Request().Context(), *param)
	if err != nil {
		return err
	}

	return ctx.JSON(200, res)
}

// Delete godoc
//	@Summary		Delete {{.Model}}
//	@Description	delete a {{.ModelSnake}} by UUID
//	@Tags			{{.ModelSnake}}
//	@Accept			json
//	@Produce		json
//	@Param			uuid	path		string	false	"uuid {{.ModelSnake}}"
//	@Success		200	{array}		string
//	@Router			/{{.ModelSnake}}/{uuid} [delete]
func (r {{.ModelCamel}}Rest) Delete(ctx echo.Context) error {
	uuid := ctx.Param("uuid")
	err := r.{{.Model}}Delete.Delete(ctx.Request().Context(), uuid)
	if err != nil {
		return err
	}

	return ctx.JSON(200, uuid)
}

// Paginate godoc
//	@Summary		Fetch {{.Model}} with Paginator
//	@Description	fetch {{.ModelSnake}} with paginator param and response
//	@Tags			{{.ModelSnake}}
//	@Accept			json
//	@Produce		json
//	@Param			id   query		string	false	"search by id"
//	@Param			uuid   query		string	false	"search by uuid"
//	@Param			created_at   query		string	false	"search by created_at"
//	@Param			created_by   query		string	false	"search by created_by"
//	@Param			updated_at   query		string	false	"search by updated_at"
//	@Param			updated_by   query		string	false	"search by updated_by"
//	@Param			deleted_by   query		string	false	"search by deleted_by"
//	@Param			text   query		string	false	"search by text"
//	@Param			parent_{{.ModelSnake}}_uuid   query		string	false	"search by parent_{{.ModelSnake}}_uuid"
//	@Success		200	{array}		model.{{.Model}}
//	@Router			/{{.ModelSnake}} [get]
func (r {{.ModelCamel}}Rest) Paginate(ctx echo.Context) error {
	param := {{.ModelSnake}}_request.{{.Model}}Param{}
	err := ctx.Bind(&param)
	if err != nil {
		return ctx.JSON(400, err.Error())
	}

	res, err := r.{{.Model}}Fetch.Paginate(ctx.Request().Context(), param)
	if err != nil {
		return ctx.JSON(404, err.Error())
	}

	return ctx.JSON(200, res)
}
